package model;
import annotations.FixedFieldAnnotations;
import java.math.BigDecimal;
import java.time.LocalDate;
public record LoanDetails (
    @FixedFieldAnnotations(length = 5,format = "\\d{5}")
     String customerId,
    @FixedFieldAnnotations(length = 20, pattern="^[A-Za-z]+$" )
     String customerName,
    @FixedFieldAnnotations(length = 6,format = "\\d{6}")
     String loanId,
    @FixedFieldAnnotations(length = 12,format = "\\d{1,9}\\.\\d{2}")
    String loanAmount,
    @FixedFieldAnnotations(length = 20,allowedValues = "Home Loan,Educational Loan,Business Loan,Personal Loan")
     String loanType,
    @FixedFieldAnnotations(length = 8,format = "\\d{2}\\d{2}\\d{4}")
    LocalDate approvalDate
    ){}

package parser;

import annotations.FixedFieldAnnotations;

import java.lang.module.Configuration;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.math.BigDecimal;
import java.time.DateTimeException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class FixedWidthParser {

    public static <T> T parseLine(String line, Class<T> clazz) throws Exception {
        List<Object> fieldValues=new ArrayList<>();
        int currentIndex = 0;

        for (Field field : clazz.getDeclaredFields()) {

            FixedFieldAnnotations annotation = field.getAnnotation(FixedFieldAnnotations.class);
            if (annotation != null) {
                int length = annotation.length();
                if (currentIndex + length > line.length()) {
                    throw new Exception("Line too short for field: " + field.getName());
                }

                String value = line.substring(currentIndex, currentIndex + length).trim();
                currentIndex += length;

                if (annotation.required() && value.isEmpty()) {
                    throw new Exception("Missing required field: " + field.getName());
                }

                if (!annotation.allowedValues().isEmpty()) {
                    String[] allowed = annotation.allowedValues().split(",");
                    boolean match = false;
                    for (String a : allowed) {
                        if (a.equalsIgnoreCase(value)) {
                            match = true;
                            break;
                        }
                    }
                    if (!match) {
                        throw new Exception("Invalid value for field '" + field.getName() + "': " + value);
                    }
                }
                if (!annotation.format().isEmpty() && !value.isEmpty()) {
                    if (!value.matches(annotation.format())) {
                        throw new Exception("Invalid format for field '" + field.getName() + "': " + value);
                    }
                }
                Object convertedValue = convertValue(value,field.getType());
                fieldValues.add(convertedValue);
            }
        }
        Class<?>[] paramTypes = new Class[fieldValues.size()];
        for(int i=0;i<fieldValues.size();i++){
            paramTypes[i]=fieldValues.get(i).getClass();
        }
        Constructor<T> constructor = clazz.getDeclaredConstructor(paramTypes);
        return constructor.newInstance(fieldValues.toArray());
    }

    private static Object convertValue(String value, Class<?> targetType){
        if(value==null || value.isEmpty())return null;

        try{
            if(targetType==String.class){
                return value;
            }else if(targetType==Integer.class||targetType==int.class){
                return Integer.parseInt(value.trim());
            }else if(targetType==Long.class||targetType==long.class){
                return Long.parseLong(value.trim());
            }else if(targetType==Double.class||targetType==double.class){
                return Double.parseDouble(value.trim());
            }else if(targetType== BigDecimal.class){
                return new BigDecimal(value.trim());
            }else if(targetType== LocalDateTime.class) {
                String trimmedValue = value.trim();
                DateTimeFormatter formatter;
                if (trimmedValue.length() <= 8) {
                    formatter = DateTimeFormatter.ofPattern("ddMMyyyy");
                    return formatter;
                } else {
//                    formatter = DateTimeFormatter.ofPattern("ddMMyyyy HH:mm:ss");
//                    return formatter;
                    return trimmedValue;
                }
            }
        } catch (Exception e) {
            throw new IllegalArgumentException("Failed to convert value '"+ value+"'to type "+ targetType.getSimpleName(),e);
        }

        return value;
    }
}


java.lang.NoSuchMethodException: model.LoanDetails.<init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)
	at java.base/java.lang.Class.getConstructor0(Class.java:3585)
	at java.base/java.lang.Class.getDeclaredConstructor(Class.java:2754)
	at parser.FixedWidthParser.parseLine(FixedWidthParser.java:64)
	at com.example1.Main.main(Main.java:59)
