package parser;

import annotations.FixedFieldAnnotations;
import java.lang.reflect.Field;

public class FixedWidthParser {

    public static <T> T parseLine(String line, Class<T> clazz) throws Exception {
        T instance = clazz.getDeclaredConstructor().newInstance();
        int currentIndex = 0;
        for (Field field : clazz.getDeclaredFields()) {
            FixedFieldAnnotations annotation = field.getAnnotation(FixedFieldAnnotations.class);
            if (annotation != null) {
                int length = annotation.length();
                if (currentIndex + length > line.length()) {
                    throw new Exception("Line too short for field: " + field.getName());
                }

                String value = line.substring(currentIndex, currentIndex + length).trim();
                currentIndex += length;

                if (annotation.required() && value.isEmpty()) {
                    throw new Exception("Missing required field: " + field.getName());
                }

                if (!annotation.allowedValues().isEmpty()) {
                    String[] allowed = annotation.allowedValues().split(",");
                    boolean match = false;
                    for (String a : allowed) {
                        if (a.equalsIgnoreCase(value)) {
                            match = true;
                            break;
                        }
                    }
                    if (!match) {
                        throw new Exception("Invalid value for field '" + field.getName() + "': " + value);
                    }
                }
                if (!annotation.format().isEmpty()) {
                    if (!value.matches(annotation.format())) {
                        throw new Exception("Invalid format for field '" + field.getName() + "': " + value);
                    }
                }
                field.setAccessible(true);
                field.set(instance, value);
            }
        }
        System.out.println(instance);
        return instance;
    }
}
