//This is my FixedFieldAnnotations.java
package annotations;
import java.lang.annotation.*;
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.FIELD)
public @interface FixedFieldAnnotations {
    int length();
    boolean required() default true;
    String allowedValues() default "";
    String format() default "";
}

//This is AccountDetails.java
package model;
import annotations.FixedFieldAnnotations;
public class AccountDetails {
    @FixedFieldAnnotations(length = 5,format="\\d{5}")
    public String customerId;
    @FixedFieldAnnotations(length = 20)
    public String customerName;
    @FixedFieldAnnotations(length = 11,format = "\\d{11}")
    public String accountNumber;
    @FixedFieldAnnotations(length = 10,allowedValues = "Savings,Current")
    public String accountType;
    @FixedFieldAnnotations(length = 12,format = "\\d{1,9}.\\d{2}")
    public String currentBalance;
}

//This is CustomerDetails.java
package model;

import annotations.FixedFieldAnnotations;
public class CustomerDetails {
    @FixedFieldAnnotations(length = 5,format = "\\d{5}")
    public String customerId;
    @FixedFieldAnnotations(length = 20 )
    public String customerName;
    @FixedFieldAnnotations(length = 6,allowedValues = "Male,Female,Others")
    public String gender;
    @FixedFieldAnnotations(length = 10,format = "\\d{2}-\\d{2}-\\d{4}")
    public String dateOfBirth;
    @FixedFieldAnnotations(length = 10,format = "\\d{10}")
    public String contactNumber;
    @FixedFieldAnnotations(length = 30,format = ".+@.+\\..+")
    public String email;
    @FixedFieldAnnotations(length = 30)
    public String residentialAddress;
}

//This is LoanDetails.java
package model;
import annotations.FixedFieldAnnotations;
public class LoanDetails {
    @FixedFieldAnnotations(length = 5,format = "\\d{5}")
    public String customerId;
    @FixedFieldAnnotations(length = 20 )
    public String customerName;
    @FixedFieldAnnotations(length = 6,format = "\\d{6}")
    public String loanId;
    @FixedFieldAnnotations(length = 12,format = "\\d{1,9}\\.\\d{2}")
    public String loanAmount;
    @FixedFieldAnnotations(length = 20,allowedValues = "Home Loan,Educational Loan,Business Loan,Personal Loan")
    public String loanType;
    @FixedFieldAnnotations(length = 10,format = "\\d{2}-\\d{2}-\\d{4}")
    public String approvalDate;
}

//This is TransactionDetails.java
package model;
import annotations.FixedFieldAnnotations;
public class TransactionDetails {

    @FixedFieldAnnotations(length = 5,format = "\\d{5}")
    public String customerId;
    @FixedFieldAnnotations(length = 20)
    public String customerName;
    @FixedFieldAnnotations(length = 6,format = "\\d{6}")
    public String transactionId;
    @FixedFieldAnnotations(length = 11,format = "\\d{11}")
    public String accountNumber;
    @FixedFieldAnnotations(length = 30,allowedValues = "UPI,mobile wallets,digital cards,NEFT,RTGS,IMPS,Cheque,Direct Deposit,ATM Transactions")
    public String transactionType;
    @FixedFieldAnnotations(length = 12,format = "\\d{1,9}\\.\\d{2}")
    public String transactionAmount;
    @FixedFieldAnnotations(length = 21,format = "\\d{2}-\\d{2}-\\d{4} & \\d{2}:\\d{2}:\\d{1,2}")
    public String transactionDateTime;
}


//This is my FixedWidthParser
package parser;
import annotations.FixedFieldAnnotations;
import java.lang.reflect.Field;

public class FixedWidthParser {

    public static <T> T parseLine(String line, Class<T> clazz) throws Exception {
        T instance = clazz.getDeclaredConstructor().newInstance();
        int currentIndex = 0;
        for (Field field : clazz.getDeclaredFields()) {
            FixedFieldAnnotations annotation = field.getAnnotation(FixedFieldAnnotations.class);
            if (annotation != null) {
                int length = annotation.length();
                if (currentIndex + length > line.length()) {
                    throw new Exception("Line too short for field: " + field.getName());
                }

                String value = line.substring(currentIndex, currentIndex + length).trim();
                currentIndex += length;

                if (annotation.required() && value.isEmpty()) {
                    throw new Exception("Missing required field: " + field.getName());
                }

                if (!annotation.allowedValues().isEmpty()) {
                    String[] allowed = annotation.allowedValues().split(",");
                    boolean match = false;
                    for (String a : allowed) {
                        if (a.equalsIgnoreCase(value)) {
                            match = true;
                            break;
                        }
                    }
                    if (!match) {
                        throw new Exception("Invalid value for field '" + field.getName() + "': " + value);
                    }
                }
                if (!annotation.format().isEmpty()) {
                    if (!value.matches(annotation.format())) {
                        throw new Exception("Invalid format for field '" + field.getName() + "': " + value);
                    }
                }
                field.setAccessible(true);
                field.set(instance, value);
            }
        }
        return instance;
    }
}

//This is my Main.java
package com.example1;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
import java.io.*;
import java.nio.file.*;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;

import model.AccountDetails;
import model.CustomerDetails;
import model.LoanDetails;
import model.TransactionDetails;
import parser.FixedWidthParser;

import java.io.*;
public class Main {

    public static void main(String[] args) throws IOException {
        String bankDirPath = "Bank";
        File bankDir = new File(bankDirPath);
        //String controlDir = baseDir + "/Control";

        Map<String, List<File>> dateToFileMap = new TreeMap<>();

        //File bankDir = new File(baseDir);
        //for (File subFolder : bankDir.listFiles()) {
           // if (subFolder.isDirectory() && !subFolder.getName().equals("Control")) {
                for (File file : bankDir.listFiles((dir, name) -> name.endsWith(".txt"))) {
                    String header = Files.lines(file.toPath()).findFirst().orElse(null);
                    if (header != null && header.startsWith("HDR|")) {
                        String[] parts = header.split("\\|");
                        if (parts.length >= 3) {
                            String dateStr = parts[2];
                            dateToFileMap.computeIfAbsent(dateStr, k -> new ArrayList<>()).add(file);
                        }
                    }
                }
          //  }
        //}
        // Create folders and copy files
        Path basePath = Paths.get("Control");
        for (String dateStr : dateToFileMap.keySet()) {
            LocalDate date = LocalDate.parse(dateStr, DateTimeFormatter.ofPattern("yyyyMMdd"));
            String folderName = "Control" + date.getMonth().name().substring(0, 1).toUpperCase() +
                    date.getMonth().name().substring(1).toLowerCase() + date.getDayOfMonth();

            Path targetDir = basePath.resolve(folderName);
            Files.createDirectories(targetDir);

            for (File file : dateToFileMap.get(dateStr)) {
                Path targetFile = targetDir.resolve(file.getName());
                Files.copy(file.toPath(), targetFile, StandardCopyOption.REPLACE_EXISTING);
            }
        }

        System.out.println("Files copied and organized by header dates.");
}
}
